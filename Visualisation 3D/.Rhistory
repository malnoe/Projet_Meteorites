knitr::opts_chunk$set(echo = TRUE)
setwd("~/Ecole/M1/Projet/Projet_Meteorites/Visualisation 3D")
knitr::opts_chunk$set(echo = TRUE)
meteorite <- read.csv("~/Ecole/M1/Projet/Projet_Meteorites/Données/Meteorite_Landings.csv")
library(threejs)
earth <- "http://eoimages.gsfc.nasa.gov/images/imagerecords/73000/73909/world.topo.bathy.200412.3x5400x2700.jpg"
meteorite_clean <- na.omit(meteorite)
meteorite_clean <- meteorite_clean[meteorite_clean$year != 860,]
library(shiny)
library(shinydashboard)
library(shinyjs)
library(threejs)
library(scales)
library(leaflet)
library(sf)
countries <- read_sf('~/Ecole/M1/Projet/Projet_Meteorites/Données//countries.geojson')
meteorite_clean <- meteorite_clean[!is.na(meteorite_clean$year) & meteorite_clean$year >= 1900 & meteorite_clean$year <= 2013, ]
ui <- dashboardPage(
dashboardHeader(title = "Visualisation des Météorites"),
dashboardSidebar(
sidebarMenu(
menuItem("Filtres", tabName = "filters", icon = icon("filter")),
menuItem("Carte", tabName = "map", icon = icon("globe"))
)
),
dashboardBody(
useShinyjs(),
tabItems(
tabItem(tabName = "filters",
h3("Filtres"),
sliderInput("year_range",
"Sélectionnez l'intervalle d'années :",
min = 1900,
max = 2013,
value = c(1900, 2013),
step = 10),
selectInput("mass_category",
"Choisissez une plage de masse :",
choices = c("Toutes les masses",
"0 - 10g", "10 - 100g", "100g - 1kg",
"1kg - 10kg", "10kg - 100kg", "100kg - 1T",
"1T - 10T", "10T - 100T"),
selected = "Toutes les masses"),
actionButton("play", "Play", class = "btn")
),
tabItem(tabName = "map",
uiOutput("globe"),
textOutput("meteorite_count"),
# Afficher les informations de la météorite en cliquant
uiOutput("meteorite_info"),
# Légende en gradient avec échelle log, centrée sous le globe
div(style = "position: absolute; bottom: 10px; left: 50%; transform: translateX(-50%);
width: 400px; height: 20px; background: linear-gradient(to right, green, yellow, red);
border: 1px solid black;",
div(style = "position: absolute; left: 0; color: white; font-size: 12px;", "0g"),
div(style = "position: absolute; right: 0; color: white; font-size: 12px;", "100T")
)
)
)
)
)
server <- function(input, output, session) {
filtered_data <- reactive({
data <- meteorite_clean[meteorite_clean$year >= input$year_range[1] &
meteorite_clean$year <= input$year_range[2], ]
if (input$mass_category != "Toutes les masses") {
mass_ranges <- list(
"0 - 10g" = c(0, 10),
"10 - 100g" = c(10, 100),
"100g - 1kg" = c(100, 1000),
"1kg - 10kg" = c(1000, 10000),
"10kg - 100kg" = c(10000, 100000),
"100kg - 1T" = c(100000, 1000000),
"1T - 10T" = c(1000000, 10000000),
"10T - 100T" = c(10000000, 100000000)
)
range <- mass_ranges[[input$mass_category]]
data <- subset(data, mass..g. >= range[1] & mass..g. <= range[2])
}
return(data)
})
output$globe <- renderUI({
data <- filtered_data()
# Appliquer l'échelle logarithmique sur la masse des météorites
log_masses <- log10(pmax(data$mass..g., 1))  # Utiliser log10 pour transformer les masses
min_log_mass <- min(log_masses, na.rm = TRUE)
max_log_mass <- max(log_masses, na.rm = TRUE)
# Échelle logarithmique pour l'attribution des couleurs
palette <- colorRampPalette(c("green", "yellow", "red"))(100)
mass_scaled <- rescale(log_masses, to = c(1, 100))
colors <- palette[round(mass_scaled)]  # Assigner les couleurs en fonction des masses
globejs(
img = earth,
lat = data$reclat,
long = data$reclong,
color = colors,
arcsHeight = 0.3,
pointsize = 1,
atmosphere = TRUE,
geojson = countries,
# Ajout de l'événement onClick pour récupérer les informations des météorites
onClick = JS("function(event) {
var meteoriteData = event.point;
Shiny.setInputValue('meteorite_click', meteoriteData, {priority: 'event'});
}")
)
})
output$meteorite_count <- renderText({
count <- nrow(filtered_data())
paste("Nombre de météorites :", count)
})
# Afficher les informations de la météorite sélectionnée
output$meteorite_info <- renderUI({
req(input$meteorite_click)  # Assurer que l'événement a bien eu lieu
meteorite <- input$meteorite_click
if (!is.null(meteorite)) {
# Chercher les informations associées au clic
selected_meteorite <- filtered_data()[filtered_data()$reclat == meteorite.lat &
filtered_data()$reclong == meteorite.lng, ]
if (nrow(selected_meteorite) > 0) {
paste("Nom : ", selected_meteorite$name, "<br>",
"Masse : ", selected_meteorite$mass..g., "g<br>",
"Année de chute : ", selected_meteorite$year, "<br>",
"Pays : ", selected_meteorite$reclat)
} else {
"Aucune information trouvée."
}
}
})
}
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
meteorite <- read.csv("~/Ecole/M1/Projet/Projet_Meteorites/Données/Meteorite_Landings.csv")
