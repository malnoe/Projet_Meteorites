))
} else {
"Aucune information trouv√©e."
}
}
})
# L√©gende du gradient avec les vraies valeurs de masse
observe({
range <- if (input$mass_category == "Toutes les masses") {
c(0, 100000000)
} else {
mass_ranges[[input$mass_category]]
}
format_mass <- function(x) {
if (x >= 1e6) {
paste0(x / 1e6, "T")
} else if (x >= 1000) {
paste0(x / 1000, "kg")
} else {
paste0(x, "g")
}
}
min_label <- format_mass(range[1])
max_label <- format_mass(range[2])
js_code <- sprintf("
document.getElementById('mass_bar').setAttribute('style', 'background: linear-gradient(to right, green, yellow, red);');
document.getElementById('mass_bar_labels').innerHTML = '<div>%s</div><div style=\"text-align: right;\">%s</div>';
", min_label, max_label)
shinyjs::runjs(js_code)
})
}
shinyApp(ui = ui, server = server)
meteorite <- na.omit(meteorite)
meteorite <- meteorite[meteorite$year != 860,]
library(shiny)
library(shinydashboard)
library(shinyjs)
library(threejs)
library(scales)
library(countrycode)
library(sf)
library(rnaturalearth)
# üåê Pr√©paration des donn√©es g√©ographiques
meteorite <- read.csv("C:/Users/garan/Documents/Ecole/M1/Projet/Projet_Meteorites/Donn√©es/Meteorite_Landings.csv")
earth <- "http://eoimages.gsfc.nasa.gov/images/imagerecords/73000/73909/world.topo.bathy.200412.3x5400x2700.jpg"
meteorite <- na.omit(meteorite)
meteorite <- meteorite[meteorite$year != 860,]
world <- ne_countries(scale = "medium", returnclass = "sf")
meteorite <- st_as_sf(meteorite, coords = c("reclong", "reclat"), crs = 4326, remove = FALSE)
meteorite <- st_join(meteorite, world["name"])
names(meteorite)[names(meteorite) == "name.y"] <- "pays"
meteorite$pays_fr <- countrycode(meteorite$pays, origin = "country.name", destination = "cldr.name.fr")
# üñºÔ∏è Interface
ui <- dashboardPage(
dashboardHeader(title = "Visualisation"),
dashboardSidebar(
useShinyjs(),
h4("Filtres", align = "center"),
sliderInput("year_range", "Intervalle d'ann√©es :", min = 1900, max = 2013, value = c(1900, 2013), step = 10),
selectInput("mass_category", "Plage de masse :",
choices = c("Toutes les masses", "0 - 10g", "10 - 100g", "100g - 1kg",
"1kg - 10kg", "10kg - 100kg", "100kg - 1T",
"1T - 10T", "10T - 100T"),
selected = "Toutes les masses"),
selectInput("pays_filter", "Pays :",
choices = sort(unique(na.omit(meteorite$pays_fr))),
selected = NULL, multiple = TRUE)
),
dashboardBody(
tags$head(
tags$style(HTML("
.skin-blue .main-header .logo {
background-color: #1a1a1a;
color: white;
font-weight: bold;
}
.skin-blue .main-header .navbar {
background-color: #1a1a1a;
}
.skin-blue .main-sidebar {
background-color: #2c3e50;
}
.box {
border-radius: 10px;
box-shadow: 0 2px 10px rgba(0,0,0,0.15);
}
.color-bar {
width: 100%;
height: 20px;
margin-top: 20px;
}
.color-bar div {
height: 100%;
display: inline-block;
}
.color-bar-label {
display: flex;
justify-content: space-between;
margin-top: 5px;
margin-bottom: 15px;
}
")),
),
fluidRow(
box(width = 12,
uiOutput("globe"),
br(),
textOutput("meteorite_count"),
br(),
div(id = "mass_bar", class = "color-bar"),
div(id = "mass_bar_labels", class = "color-bar-label"),
br(),
uiOutput("meteorite_info")
)
)
)
)
# ‚öôÔ∏è Serveur
server <- function(input, output, session) {
mass_ranges <- list(
"0 - 10g" = c(0, 10),
"10 - 100g" = c(10, 100),
"100g - 1kg" = c(100, 1000),
"1kg - 10kg" = c(1000, 10000),
"10kg - 100kg" = c(10000, 100000),
"100kg - 1T" = c(100000, 1000000),
"1T - 10T" = c(1000000, 10000000),
"10T - 100T" = c(10000000, 100000000)
)
filtered_data <- reactive({
data <- meteorite[meteorite$year >= input$year_range[1] &
meteorite$year <= input$year_range[2], ]
if (input$mass_category != "Toutes les masses") {
range <- mass_ranges[[input$mass_category]]
data <- subset(data, mass..g. >= range[1] & mass..g. <= range[2])
}
if (!is.null(input$pays_filter) && length(input$pays_filter) > 0) {
data <- data[data$pays_fr %in% input$pays_filter, ]
}
return(data)
})
output$globe <- renderUI({
data <- filtered_data()
log_masses <- log10(pmax(data$mass..g., 1))
mass_scaled <- rescale(log_masses, to = c(1, 100))
palette <- colorRampPalette(c("green", "yellow", "red"))(100)
colors <- palette[round(mass_scaled)]
globejs(
img = earth,
lat = data$reclat,
long = data$reclong,
color = colors,
arcsHeight = 0.3,
pointsize = 1,
atmosphere = TRUE
)
})
output$meteorite_count <- renderText({
count <- nrow(filtered_data())
paste("Nombre de m√©t√©orites :", count)
})
output$meteorite_info <- renderUI({
req(input$meteorite_click)
meteorite <- input$meteorite_click
if (!is.null(meteorite)) {
selected <- filtered_data()[filtered_data()$reclat == meteorite$lat &
filtered_data()$reclong == meteorite$lng, ]
if (nrow(selected) > 0) {
HTML(paste0(
"Nom : ", selected$name, "<br>",
"Masse : ", selected$mass..g., "g<br>",
"Ann√©e de chute : ", selected$year, "<br>",
"Pays : ", selected$pays_fr
))
} else {
"Aucune information trouv√©e."
}
}
})
# L√©gende du gradient avec les vraies valeurs de masse
observe({
range <- if (input$mass_category == "Toutes les masses") {
c(0, 100000000)
} else {
mass_ranges[[input$mass_category]]
}
format_mass <- function(x) {
if (x >= 1e6) {
paste0(x / 1e6, "T")
} else if (x >= 1000) {
paste0(x / 1000, "kg")
} else {
paste0(x, "g")
}
}
min_label <- format_mass(range[1])
max_label <- format_mass(range[2])
js_code <- sprintf("
document.getElementById('mass_bar').setAttribute('style', 'background: linear-gradient(to right, green, yellow, red);');
document.getElementById('mass_bar_labels').innerHTML = '<div>%s</div><div style=\"text-align: right;\">%s</div>';
", min_label, max_label)
shinyjs::runjs(js_code)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shinydashboard)
library(shinyjs)
library(threejs)
library(scales)
library(countrycode)
library(sf)
library(rnaturalearth)
# üåê Pr√©paration des donn√©es g√©ographiques
meteorite <- read.csv("C:/Users/garan/Documents/Ecole/M1/Projet/Projet_Meteorites/Donn√©es/Meteorite_Landings.csv")
earth <- "http://eoimages.gsfc.nasa.gov/images/imagerecords/73000/73909/world.topo.bathy.200412.3x5400x2700.jpg"
meteorite <- na.omit(meteorite)
meteorite <- meteorite[meteorite$year != 860,]
world <- ne_countries(scale = "medium", returnclass = "sf")
meteorite <- st_as_sf(meteorite, coords = c("reclong", "reclat"), crs = 4326, remove = FALSE)
meteorite <- st_join(meteorite, world["name"])
names(meteorite)[names(meteorite) == "name.y"] <- "pays"
meteorite$pays_fr <- countrycode(meteorite$pays, origin = "country.name", destination = "cldr.name.fr")
# üñºÔ∏è Interface
ui <- dashboardPage(
dashboardHeader(title = "Visualisation"),
dashboardSidebar(
useShinyjs(),
h4("Filtres", align = "center"),
sliderInput("year_range", "Intervalle d'ann√©es :", min = 1900, max = 2013, value = c(1900, 2013), step = 10),
selectInput("mass_category", "Plage de masse :",
choices = c("Toutes les masses", "0 - 10g", "10 - 100g", "100g - 1kg",
"1kg - 10kg", "10kg - 100kg", "100kg - 1T",
"1T - 10T", "10T - 100T"),
selected = "Toutes les masses"),
selectInput("pays_filter", "Pays :",
choices = sort(unique(na.omit(meteorite$pays_fr))),
selected = NULL, multiple = TRUE)
),
dashboardBody(
tags$head(
tags$style(HTML("
.skin-blue .main-header .logo {
background-color: #1a1a1a;
color: white;
font-weight: bold;
}
.skin-blue .main-header .navbar {
background-color: #1a1a1a;
}
.skin-blue .main-sidebar {
background-color: #2c3e50;
}
.box {
border-radius: 10px;
box-shadow: 0 2px 10px rgba(0,0,0,0.15);
}
.color-bar {
width: 100%;
height: 20px;
margin-top: 20px;
}
.color-bar div {
height: 100%;
display: inline-block;
}
.color-bar-label {
display: flex;
justify-content: space-between;
margin-top: 5px;
margin-bottom: 15px;
}
")),
),
fluidRow(
box(width = 12,
uiOutput("globe"),
br(),
textOutput("meteorite_count"),
br(),
div(id = "mass_bar", class = "color-bar"),
div(id = "mass_bar_labels", class = "color-bar-label"),
br(),
uiOutput("meteorite_info")
)
)
)
)
# ‚öôÔ∏è Serveur
server <- function(input, output, session) {
mass_ranges <- list(
"0 - 10g" = c(0, 10),
"10 - 100g" = c(10, 100),
"100g - 1kg" = c(100, 1000),
"1kg - 10kg" = c(1000, 10000),
"10kg - 100kg" = c(10000, 100000),
"100kg - 1T" = c(100000, 1000000),
"1T - 10T" = c(1000000, 10000000),
"10T - 100T" = c(10000000, 100000000)
)
filtered_data <- reactive({
data <- meteorite[meteorite$year >= input$year_range[1] &
meteorite$year <= input$year_range[2], ]
if (input$mass_category != "Toutes les masses") {
range <- mass_ranges[[input$mass_category]]
data <- subset(data, mass..g. >= range[1] & mass..g. <= range[2])
}
if (!is.null(input$pays_filter) && length(input$pays_filter) > 0) {
data <- data[data$pays_fr %in% input$pays_filter, ]
}
return(data)
})
output$globe <- renderUI({
data <- filtered_data()
log_masses <- log10(pmax(data$mass..g., 1))
mass_scaled <- rescale(log_masses, to = c(1, 100))
palette <- colorRampPalette(c("green", "yellow", "red"))(100)
colors <- palette[round(mass_scaled)]
globejs(
img = earth,
lat = data$reclat,
long = data$reclong,
color = colors,
arcsHeight = 0.3,
pointsize = 1,
atmosphere = TRUE
)
})
output$meteorite_count <- renderText({
count <- nrow(filtered_data())
paste("Nombre de m√©t√©orites :", count)
})
output$meteorite_info <- renderUI({
req(input$meteorite_click)
meteorite <- input$meteorite_click
if (!is.null(meteorite)) {
selected <- filtered_data()[filtered_data()$reclat == meteorite$lat &
filtered_data()$reclong == meteorite$lng, ]
if (nrow(selected) > 0) {
HTML(paste0(
"Nom : ", selected$name, "<br>",
"Masse : ", selected$mass..g., "g<br>",
"Ann√©e de chute : ", selected$year, "<br>",
"Pays : ", selected$pays_fr
))
} else {
"Aucune information trouv√©e."
}
}
})
# L√©gende du gradient avec les vraies valeurs de masse
observe({
range <- if (input$mass_category == "Toutes les masses") {
c(0, 100000000)
} else {
mass_ranges[[input$mass_category]]
}
format_mass <- function(x) {
if (x >= 1e6) {
paste0(x / 1e6, "T")
} else if (x >= 1000) {
paste0(x / 1000, "kg")
} else {
paste0(x, "g")
}
}
min_label <- format_mass(range[1])
max_label <- format_mass(range[2])
js_code <- sprintf("
document.getElementById('mass_bar').setAttribute('style', 'background: linear-gradient(to right, green, yellow, red);');
document.getElementById('mass_bar_labels').innerHTML = '<div>%s</div><div style=\"text-align: right;\">%s</div>';
", min_label, max_label)
shinyjs::runjs(js_code)
})
}
shinyApp(ui = ui, server = server)
runApp('Ecole/M1/Projet/Projet_Meteorites/Visualisation 3D/Application_meteorites.R')
runApp('Ecole/M1/Projet/Projet_Meteorites/Visualisation 3D/Application_meteorites.R')
library(corrr)
library(xtable)
library(ggplot2)
library(dplyr)
Meteorite_Landings <- read.csv("~/Ecole/M1/Projet/Projet_Meteorites/Donn√©es/Meteorite_Landings.csv")
#Recclass
# Calcul pourcentage en ne gardant que ceux > 4%
recclass_counts <- Meteorite_Landings %>%
group_by(recclass) %>%
summarise(count = n()) %>%
mutate(percentage = count / sum(count) * 100) %>%
filter(percentage >= 4)
# Trier par pourcentage
recclass_counts <- recclass_counts %>%
arrange(desc(percentage))
# Diagramme en barres
ggplot(recclass_counts, aes(x = reorder(recclass, percentage), y = percentage, fill = recclass)) +
geom_bar(stat = "identity") +
labs(title = "R√©partition des classes de recclass (> 4%)",
x = "Classe",
y = "Pourcentage",
fill = "Classe") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#Recclass
# Calcul pourcentage en ne gardant que ceux > 4%
recclass_counts <- Meteorite_Landings %>%
group_by(recclass) %>%
summarise(count = n()) %>%
mutate(percentage = count / sum(count) * 100) %>%
filter(percentage >= 4)
# Trier par pourcentage
recclass_counts <- recclass_counts %>%
arrange(desc(percentage))
# D√©finir les couleurs des barres
bar_colors <- c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf")
# Diagramme en barres avec couleurs personnalis√©es
ggplot(recclass_counts, aes(x = reorder(recclass, percentage), y = percentage, fill = recclass)) +
geom_bar(stat = "identity", fill = bar_colors[1:nrow(recclass_counts)]) +
labs(title = "R√©partition des classes de recclass (> 4%)",
x = "Classe",
y = "Pourcentage",
fill = "Classe") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#Recclass
# Calcul pourcentage en ne gardant que ceux > 4%
recclass_counts <- Meteorite_Landings %>%
group_by(recclass) %>%
summarise(count = n()) %>%
mutate(percentage = count / sum(count) * 100) %>%
filter(percentage >= 4)
# Trier par pourcentage
recclass_counts <- recclass_counts %>%
arrange(desc(percentage))
# D√©finir les couleurs des barres
bar_colors <- c("deepskyblue4", "springgreen3", "deepskyblue2", "springgreen4", "springgreen2", "gold2", "gold1")
# Diagramme en barres avec couleurs personnalis√©es
ggplot(recclass_counts, aes(x = reorder(recclass, percentage), y = percentage, fill = recclass)) +
geom_bar(stat = "identity", fill = bar_colors[1:nrow(recclass_counts)]) +
labs(title = "R√©partition des classes de recclass (> 4%)",
x = "Classe",
y = "Pourcentage",
fill = "Classe") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Year
# D√©finir les couleurs des barres
bar_colors <- c("deepskyblue4", "springgreen4", "deepskyblue4", "springgreen4", "springgreen4", "goldenrod2", "goldenrod2")
# Diagramme en barres avec couleurs personnalis√©es
ggplot(recclass_counts, aes(x = reorder(recclass, percentage), y = percentage, fill = recclass)) +
geom_bar(stat = "identity", fill = bar_colors[1:nrow(recclass_counts)]) +
labs(title = "R√©partition des classes de recclass (> 4%)",
x = "Classe",
y = "Pourcentage",
fill = "Classe") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# D√©finir les couleurs des barres
bar_colors <- c("deepskyblue4", "springgreen4", "deepskyblue4", "springgreen4", "springgreen4", "darkgoldenrod2", "darkgoldenrod2")
# Diagramme en barres avec couleurs personnalis√©es
ggplot(recclass_counts, aes(x = reorder(recclass, percentage), y = percentage, fill = recclass)) +
geom_bar(stat = "identity", fill = bar_colors[1:nrow(recclass_counts)]) +
labs(title = "R√©partition des classes de recclass (> 4%)",
x = "Classe",
y = "Pourcentage",
fill = "Classe") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# D√©finir les couleurs des barres
bar_colors <- c("deepskyblue4", "springgreen4", "deepskyblue4", "springgreen4", "springgreen4", "darkgoldenrod", "darkgoldenrod")
# Diagramme en barres avec couleurs personnalis√©es
ggplot(recclass_counts, aes(x = reorder(recclass, percentage), y = percentage, fill = recclass)) +
geom_bar(stat = "identity", fill = bar_colors[1:nrow(recclass_counts)]) +
labs(title = "R√©partition des classes de recclass (> 4%)",
x = "Classe",
y = "Pourcentage",
fill = "Classe") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# D√©finir les couleurs des barres
bar_colors <- c("deepskyblue4", "springgreen4", "deepskyblue4", "springgreen4", "springgreen4", "darkgoldenrod4", "darkgoldenrod4")
# Diagramme en barres avec couleurs personnalis√©es
ggplot(recclass_counts, aes(x = reorder(recclass, percentage), y = percentage, fill = recclass)) +
geom_bar(stat = "identity", fill = bar_colors[1:nrow(recclass_counts)]) +
labs(title = "R√©partition des classes de recclass (> 4%)",
x = "Classe",
y = "Pourcentage",
fill = "Classe") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# D√©finir les couleurs des barres
bar_colors <- c("deepskyblue4", "springgreen4", "deepskyblue4", "springgreen4", "springgreen4", "tan4", "darkgoldenrod4")
# Diagramme en barres avec couleurs personnalis√©es
ggplot(recclass_counts, aes(x = reorder(recclass, percentage), y = percentage, fill = recclass)) +
geom_bar(stat = "identity", fill = bar_colors[1:nrow(recclass_counts)]) +
labs(title = "R√©partition des classes de recclass (> 4%)",
x = "Classe",
y = "Pourcentage",
fill = "Classe") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# D√©finir les couleurs des barres
bar_colors <- c("deepskyblue4", "springgreen4", "deepskyblue4", "springgreen4", "springgreen4", "tan4", "tan4")
# Diagramme en barres avec couleurs personnalis√©es
ggplot(recclass_counts, aes(x = reorder(recclass, percentage), y = percentage, fill = recclass)) +
geom_bar(stat = "identity", fill = bar_colors[1:nrow(recclass_counts)]) +
labs(title = "R√©partition des classes de recclass (> 4%)",
x = "Classe",
y = "Pourcentage",
fill = "Classe") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
library(shiny); runApp('Ecole/M1/Projet/Projet_Meteorites/Visualisation 3D/Application_meteorites.R')
